// <auto-generated />
using Cheburek999.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cheburek999.Migrations
{
    [DbContext(typeof(DavidContext))]
    [Migration("20240615153443_Update5")]
    partial class Update5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Cheburek999.Models.Display", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Diagonal")
                        .HasColumnType("float");

                    b.Property<int>("PixelsX")
                        .HasColumnType("int");

                    b.Property<int>("PixelsY")
                        .HasColumnType("int");

                    b.Property<int>("RefreshRate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Displays");
                });

            modelBuilder.Entity("Cheburek999.Models.Notebook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BatteryLife")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("DisplayId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("OperationSystemId")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProcessorId")
                        .HasColumnType("int");

                    b.Property<int>("RamMemory")
                        .HasColumnType("int");

                    b.Property<int>("RomMemory")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DisplayId");

                    b.HasIndex("OperationSystemId");

                    b.HasIndex("ProcessorId");

                    b.ToTable("Notebooks");
                });

            modelBuilder.Entity("Cheburek999.Models.NotebookCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Cheburek999.Models.NotebookCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("NotebookCompanies");
                });

            modelBuilder.Entity("Cheburek999.Models.OperationSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("OperationSystems");
                });

            modelBuilder.Entity("Cheburek999.Models.Processor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CoresCount")
                        .HasColumnType("int");

                    b.Property<float>("Frequency")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProcessorCompanyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProcessorCompanyId");

                    b.ToTable("Processors");
                });

            modelBuilder.Entity("Cheburek999.Models.ProcessorCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ProcessorsCompany");
                });

            modelBuilder.Entity("NotebookNotebookCategory", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("NotebooksId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "NotebooksId");

                    b.HasIndex("NotebooksId");

                    b.ToTable("NotebookNotebookCategory");
                });

            modelBuilder.Entity("Cheburek999.Models.Notebook", b =>
                {
                    b.HasOne("Cheburek999.Models.NotebookCompany", "Company")
                        .WithMany("Notebooks")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cheburek999.Models.Display", "Display")
                        .WithMany("Notebooks")
                        .HasForeignKey("DisplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cheburek999.Models.OperationSystem", "OperationSystem")
                        .WithMany("Notebooks")
                        .HasForeignKey("OperationSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cheburek999.Models.Processor", "Processor")
                        .WithMany("Notebooks")
                        .HasForeignKey("ProcessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Display");

                    b.Navigation("OperationSystem");

                    b.Navigation("Processor");
                });

            modelBuilder.Entity("Cheburek999.Models.Processor", b =>
                {
                    b.HasOne("Cheburek999.Models.ProcessorCompany", "ProcessorCompany")
                        .WithMany("Processors")
                        .HasForeignKey("ProcessorCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessorCompany");
                });

            modelBuilder.Entity("NotebookNotebookCategory", b =>
                {
                    b.HasOne("Cheburek999.Models.NotebookCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cheburek999.Models.Notebook", null)
                        .WithMany()
                        .HasForeignKey("NotebooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cheburek999.Models.Display", b =>
                {
                    b.Navigation("Notebooks");
                });

            modelBuilder.Entity("Cheburek999.Models.NotebookCompany", b =>
                {
                    b.Navigation("Notebooks");
                });

            modelBuilder.Entity("Cheburek999.Models.OperationSystem", b =>
                {
                    b.Navigation("Notebooks");
                });

            modelBuilder.Entity("Cheburek999.Models.Processor", b =>
                {
                    b.Navigation("Notebooks");
                });

            modelBuilder.Entity("Cheburek999.Models.ProcessorCompany", b =>
                {
                    b.Navigation("Processors");
                });
#pragma warning restore 612, 618
        }
    }
}
